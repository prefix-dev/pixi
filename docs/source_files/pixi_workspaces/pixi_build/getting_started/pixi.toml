# --8<-- [start:full]
# Specifies properties for the whole workspace
# --8<-- [start:preview]
[workspace]
preview = ["pixi-build"]
# --8<-- [end:preview]
channels = ["https://prefix.dev/conda-forge"]
platforms = ["win-64", "linux-64", "osx-arm64", "osx-64"]

# There can be multiple packages in a workspace
# In `package` you specify properties specific to the package
# --8<-- [start:package]
[package]
name = "rich_example"
version = "0.1.0"
# --8<-- [end:package]

# Here the build system of the package is specified
# We are using `pixi-build-python` in order to build a Python package
# --8<-- [start:build-system]
[package.build]
backend = { name = "pixi-build-python", version = "0.1.*" }
channels = [
  "https://prefix.dev/pixi-build-backends",
  "https://prefix.dev/conda-forge",
]
# --8<-- [end:build-system]


# The Python package `rich_example` uses `hatchling` as Python build backend
# --8<-- [start:host-dependencies]
[package.host-dependencies]
hatchling = "*"
# --8<-- [end:host-dependencies]

# --8<-- [start:dependencies]
# We add our package as dependency to the workspace
[dependencies]
# We can get source dependencies from a path on our file system
rich_example_by_folder = { path = "./recipe_by_folder" }
# as well as from a git repository
boost-check = { git = "https://github.com/wolfv/pixi-build-examples", branch = "main", subdirectory = "boost-check" }

# If the directory contains a `pixi.toml`, `pixi-build` will be used to build the package
rich_example = { path = "./rich_example" }
# if the directory contains a `recipe.yaml`, `rattler-build` will be used.
rich_example_by_file = { path = "./recipe_by_file/recipe.yaml" }
# --8<-- [end:dependencies]

# --8<-- [start:run-dependencies]
[package.run-dependencies]
rich = ">=13.9.4,<14"
# --8<-- [end:run-dependencies]

# --8<-- [end:full]
