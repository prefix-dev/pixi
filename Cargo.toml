[workspace]
exclude = [
  # Only pulled in when enabling certain features. We do not want to include
  # these crates when running workspace wide commands.
  "crates/pixi_allocator",
]
members = ["crates/*"]

[workspace.package]
authors = ["pixi contributors <hi@prefix.dev>"]
edition = "2021"
homepage = "https://github.com/prefix-dev/pixi"
license = "BSD-3-Clause"
readme = "README.md"
repository = "https://github.com/prefix-dev/pixi"

[workspace.dependencies]
ahash = "0.8.11"
assert_matches = "1.5.0"
async-fd-lock = "0.2.0"
async-once-cell = "0.5.4"
async-trait = "0.1.86"
base64 = "0.22.1"
bytes = "1.10.0"
chrono = "0.4.40"
clap = { version = "4.5.31", default-features = false }
clap_complete = "4.5.46"
clap_complete_nushell = "4.5.5"
concat-idents = "1.1.5"
console = "0.15.10"
crossbeam-channel = "0.5.14"
csv = "1.3.1"
ctrlc = "3.4.5"
dashmap = "6.1.0"
deno_task_shell = "0.21.0"
dialoguer = "0.11.0"
digest = "0.10"
dirs = "6.0.0"
dunce = "1.0.5"
fd-lock = "4.0.2"
flate2 = "1.1.0"
fs-err = { version = "3.1.0" }
fs_extra = "1.3.0"
futures = "0.3.31"
hex = "0.4.3"
http = "1.2.0"
http-cache-reqwest = "0.15.1"
human_bytes = "0.4.3"
humantime = "2.1.0"
indexmap = "2.7.1"
indicatif = "0.17.11"
insta = "1.42.1"
is_executable = "1.0.4"
itertools = "0.14.0"
jsonrpsee = "=0.24.2"
libc = { version = "0.2.170", default-features = false }
memchr = "2.7.4"
miette = { version = "7.5.0" }
minijinja = "2.7.0"
nix = { version = "0.29.0", default-features = false }
once_cell = "1.20.3"
parking_lot = "0.12.3"
pathdiff = "0.2.3"
pep440_rs = "0.7.3"
pep508_rs = "0.9.2"
percent-encoding = "2.3.1"
pyproject-toml = "0.13.4"
regex = "1.11.1"
reqwest = { version = "0.12.12", default-features = false }
reqwest-middleware = "0.4"
reqwest-retry = "0.7.0"
rlimit = "0.10.2"
rstest = "0.24.0"
self-replace = "1.5.0"
serde = "1.0.218"
serde-untagged = "0.1.6"
serde-value = "0.7.0"
serde_ignored = "0.1.10"
serde_json = "1.0.139"
serde_with = "3.12.0"
serde_yaml = "0.9.34"
sha1 = "0.10.6"
sha2 = "0.10.8"
shlex = "1.3.0"
signal-hook = "0.3.17"
spdx = "0.10.8"
strsim = "0.11.1"
strum = "0.27.1"
tabwriter = "1.4.1"
tar = "0.4.44"
temp-env = { version = "0.3.6", features = ["async_closure"] }
tempfile = "3.17.1"
thiserror = "2.0.11"
tokio = "1.43.0"
tokio-stream = "0.1.17"
tokio-util = "0.7.13"
toml-span = "0.4.1"
toml_edit = "0.22.24"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
typed-path = "0.10.0"
uv-build-frontend = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-distribution-filename = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-distribution-types = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-install-wheel = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-pep440 = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-pep508 = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-platform-tags = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-pypi-types = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-requirements-txt = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }

wax = "0.6.0"
which = "7.0.2"

# Rattler crates
file_url = "0.2.4"
rattler = { version = "0.33.4", default-features = false }
rattler_cache = { version = "0.3.16", default-features = false }
rattler_conda_types = { version = "0.31.6", default-features = false, features = [
  "rayon",
] }
rattler_digest = { version = "1.1.0", default-features = false }
rattler_lock = { version = "0.22.49", default-features = false }
rattler_menuinst = { version = "0.2.6", default-features = false }
rattler_networking = { version = "0.22.11", default-features = false, features = [
  "google-cloud-auth",
] }
rattler_repodata_gateway = { version = "0.22.4", default-features = false }
rattler_shell = { version = "0.22.25", default-features = false }
rattler_solve = { version = "1.4.3", default-features = false }
rattler_virtual_packages = { version = "2.0.9", default-features = false }

# Bumping this to a higher version breaks the Windows path handling.
url = "2.5.4"
uv-auth = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-cache = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-cache-info = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-client = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-configuration = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-dispatch = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-distribution = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-git = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-git-types = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-installer = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-normalize = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-python = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-requirements = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-resolver = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-types = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
uv-workspace = { git = "https://github.com/astral-sh/uv", tag = "0.6.9" }
winapi = { version = "0.3.9", default-features = false }
xxhash-rust = "0.8.15"
zip = { version = "2.4.2", default-features = false }
zstd = { version = "0.13.3", default-features = false }

fancy_display = { path = "crates/fancy_display" }
pixi_allocator = { path = "crates/pixi_allocator" }
pixi_build_frontend = { path = "crates/pixi_build_frontend" }
pixi_build_type_conversions = { path = "crates/pixi_build_type_conversions" }
pixi_build_types = { path = "crates/pixi_build_types" }
pixi_config = { path = "crates/pixi_config" }
pixi_consts = { path = "crates/pixi_consts" }
pixi_default_versions = { path = "crates/pixi_default_versions" }
pixi_git = { path = "crates/pixi_git" }
pixi_glob = { path = "crates/pixi_glob" }
pixi_manifest = { path = "crates/pixi_manifest" }
pixi_progress = { path = "crates/pixi_progress" }
pixi_record = { path = "crates/pixi_record" }
pixi_spec = { path = "crates/pixi_spec" }
pixi_toml = { path = "crates/pixi_toml" }
pixi_utils = { path = "crates/pixi_utils", default-features = false }
pixi_uv_conversions = { path = "crates/pixi_uv_conversions" }
pypi_mapping = { path = "crates/pypi_mapping" }
pypi_modifiers = { path = "crates/pypi_modifiers" }

[package]
authors.workspace = true
description = "A package management and workflow tool"
edition.workspace = true
homepage.workspace = true
license.workspace = true
name = "pixi"
readme.workspace = true
repository.workspace = true
version = "0.45.0"

[features]
default = ["online_tests", "rustls-tls"]
native-tls = [
  "reqwest/native-tls",
  "reqwest/native-tls-alpn",
  "rattler_repodata_gateway/native-tls",
  "rattler/native-tls",
  "pixi_utils/native-tls",
]
# run tests connecting to remote Internet services
online_tests = []
rustls-tls = [
  "reqwest/rustls-tls",
  "reqwest/rustls-tls-native-roots",
  "rattler_repodata_gateway/rustls-tls",
  "rattler/rustls-tls",
  "pixi_utils/rustls-tls",
]
self_update = []
slow_integration_tests = []

# This feature enables performance optimizations but at the cost of increased
# compile times. By default, it is only used when building the release binary.
performance = ["pixi_allocator"]

[dependencies]
ahash = { workspace = true }
assert_matches = { workspace = true }
async-fd-lock = { workspace = true }
async-once-cell = { workspace = true }
barrier_cell = { path = "crates/barrier_cell" }
base64 = { workspace = true }
chrono = { workspace = true }
clap = { workspace = true, features = [
  "derive",
  "usage",
  "wrap_help",
  "std",
  "color",
  "error-context",
  "env",
] }
clap_complete = { workspace = true }
clap_complete_nushell = { workspace = true }
console = { workspace = true, features = ["windows-console-colors"] }
crossbeam-channel = { workspace = true }
csv = { workspace = true }
deno_task_shell = { workspace = true }
dialoguer = { workspace = true }
dirs = { workspace = true }
dunce = { workspace = true }
fancy_display = { workspace = true }
flate2 = { workspace = true }
fs_extra = { workspace = true }
futures = { workspace = true }
human_bytes = { workspace = true }
humantime = { workspace = true }
indexmap = { workspace = true, features = ["serde"] }
indicatif = { workspace = true }
is_executable = { workspace = true }
itertools = { workspace = true }
miette = { workspace = true, features = ["fancy-no-backtrace"] }
minijinja = { workspace = true, features = ["builtins"] }
once_cell = { workspace = true }
parking_lot = { workspace = true }
priority-queue = ">=2.1.2,<2.2.1" # need by uv, avoid update edition to 2024
rstest = { workspace = true }
uv-build-frontend = { workspace = true }
uv-distribution-filename = { workspace = true }
uv-distribution-types = { workspace = true }
uv-install-wheel = { workspace = true }

pep440_rs = { workspace = true }
pep508_rs = { workspace = true }
percent-encoding = { workspace = true }
rattler = { workspace = true, features = ["cli-tools", "indicatif"] }
rattler_conda_types = { workspace = true }
rattler_digest = { workspace = true }
rattler_lock = { workspace = true }
rattler_menuinst = { workspace = true }
rattler_networking = { workspace = true }
rattler_repodata_gateway = { workspace = true, features = [
  "sparse",
  "gateway",
] }
rattler_shell = { workspace = true, features = ["sysinfo"] }
rattler_solve = { workspace = true, features = ["resolvo", "serde"] }
uv-git = { workspace = true }
uv-pep440 = { workspace = true }
uv-pep508 = { workspace = true }
uv-pypi-types = { workspace = true }

anyhow = "1.0.97"
ctrlc = { workspace = true }
fs-err = { workspace = true, features = ["tokio"] }
pixi_allocator = { workspace = true, optional = true }
pixi_build_frontend = { workspace = true }
pixi_build_types = { workspace = true }
pixi_config = { workspace = true }
pixi_consts = { workspace = true }
pixi_default_versions = { workspace = true }
pixi_git = { workspace = true }
pixi_glob = { workspace = true }
pixi_manifest = { workspace = true, features = [
  "rattler_lock",
  "rattler_solve",
] }
pixi_progress = { workspace = true }
pixi_record = { workspace = true }
pixi_spec = { workspace = true }
pixi_toml = { workspace = true }
pixi_utils = { workspace = true, default-features = false }
pixi_uv_conversions = { workspace = true }
pypi_mapping = { workspace = true }
pypi_modifiers = { workspace = true }
rattler_virtual_packages = { workspace = true }
rayon = "1.10.0"
regex = { workspace = true }
reqwest = { workspace = true, features = [
  "http2",
  "macos-system-configuration",
] }
reqwest-middleware = { workspace = true }
rlimit = { workspace = true }
self-replace = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
serde_with = { workspace = true, features = ["indexmap"] }
shlex = { workspace = true }
strsim = { workspace = true }
tabwriter = { workspace = true, features = ["ansi_formatting"] }
tar = { workspace = true }
temp-env = { workspace = true }
tempfile = { workspace = true }
thiserror = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt-multi-thread", "signal"] }
tokio-util = { workspace = true }
toml-span = { workspace = true }
toml_edit = { workspace = true, features = ["serde"] }
tracing = { workspace = true }
tracing-subscriber = { workspace = true, features = ["env-filter"] }
typed-path = { workspace = true }
url = { workspace = true }
uv-auth = { workspace = true }
uv-cache = { workspace = true }
uv-cache-info = { workspace = true }
uv-client = { workspace = true }
uv-configuration = { workspace = true }
uv-dispatch = { workspace = true }
uv-distribution = { workspace = true }
uv-git-types = { workspace = true }
uv-installer = { workspace = true }
uv-normalize = { workspace = true }
uv-python = { workspace = true }
uv-requirements = { workspace = true }
uv-requirements-txt = { workspace = true }
uv-resolver = { workspace = true }
uv-types = { workspace = true }
uv-workspace = { workspace = true }
xxhash-rust = { workspace = true }
zip = { workspace = true, features = ["deflate", "time"] }
zstd = { workspace = true }

[target.'cfg(unix)'.dependencies]
libc = { workspace = true, default-features = false }
nix = { workspace = true, features = ["poll", "term"] }
pixi_pty = { path = "crates/pixi_pty" }
sha2 = { workspace = true, features = ["asm"] }
signal-hook = { workspace = true }

[profile.dist]
codegen-units = 1
inherits = "release"
lto = "fat"
opt-level = 3
strip = "symbols"

[profile.ci]
codegen-units = 16
inherits = "release"
lto = false
opt-level = 3
strip = false


[dev-dependencies]
async-trait = { workspace = true }
fake = "4.0.0"
http = { workspace = true }
insta = { workspace = true, features = ["yaml", "glob", "filters"] }
rstest = { workspace = true }
serde_json = { workspace = true }
tokio = { workspace = true, features = ["rt"] }


[patch.crates-io]
# This is a temporary patch to get `cargo vendor` to work with the `uv` and pep508_rs` crates.
version-ranges = { git = "https://github.com/astral-sh/pubgrub", rev = "b70cf707aa43f21b32f3a61b8a0889b15032d5c4" }

# Config for 'dist'
[workspace.metadata.dist]
# The preferred dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.25.1"
# CI backends to support
ci = "github"
# The installers to generate for each app
installers = ["msi"]
# The archive format to use for windows builds (defaults .zip)
windows-archive = ".zip"
# The archive format to use for non-windows builds (defaults .tar.xz)
unix-archive = ".tar.gz"
# Target platforms to build apps for (Rust target-triple syntax)
targets = [
  "aarch64-apple-darwin",
  "aarch64-unknown-linux-musl",
  "aarch64-pc-windows-msvc",
  "x86_64-apple-darwin",
  "x86_64-unknown-linux-musl",
  "x86_64-pc-windows-msvc",
]
# Whether CI should trigger releases with dispatches instead of tag pushes
dispatch-releases = true
# Which phase dist should use to create the GitHub release
github-release = "announce"
# Whether to auto-include files like READMEs, LICENSEs, and CHANGELOGs (default true)
auto-includes = false
# Whether to put the binaries in the root of the archive or not, this only applies to unix archives
binaries-in-root = true
# Which actions to run on pull requests
pr-run-mode = "skip"
# Skip checking whether the specified configuration files are up to date
allow-dirty = ["msi", "ci"]
# Whether to sign macOS executables
macos-sign = true

[workspace.metadata.dist.dependencies.apt]
gcc-aarch64-linux-gnu = { version = '*', targets = [
  "aarch64-unknown-linux-gnu",
  "aarch64-unknown-linux-musl",
] }

# Package config for `dist`
[package.metadata.dist]
features = ["self_update", "performance"]

[package.metadata.cargo-machete]
ignored = ["priority-queue"] # need by uv, avoid update edition to 2024
