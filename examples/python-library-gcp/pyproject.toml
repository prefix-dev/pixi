# This is a small example that builds and uploads a `.whl` to a custom pypi registry
# If you want to upload to PyPI just replace the `--repository-url`
# To use with GCP, make sure you've run a `gcloud auth`

[project]
name = "hi"
version = "0.1.0"
description = "Add a short description here"
authors = [{name = "Tim de Jager", email = "tim@prefix.dev"}]
requires-python = ">= 3.11"
dependencies = [
   "rich"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64", "win-64", "osx-64"]


[tool.pixi.feature.publish.dependencies]
# For building wheel using hatch
hatch = "*"
# Uploading package
twine = "*"
# Used for gcp authentication by twine
keyring = ">=25.2.0,<25.3"
"keyrings.google-artifactregistry-auth" = ">=1.1.1,<1.2"

# Test feature
[tool.pixi.feature.test.dependencies]
pytest = "*"

# Local install for testing
[tool.pixi.pypi-dependencies]
hi = { path = ".", editable = true }

[tool.pixi.environments]
# Use this env for publhing
publish = ["publish"]
# Use this env for testing
test = ["test"]

## This has tasks for building and uploading
## to custom GCP instance
[tool.pixi.feature.publish.tasks]
build = {cmd = "hatch build", inputs = ["say_hi/*"], outputs = ["dist/*"]}
publish = {cmd = "twine upload --skip-existing --repository-url https://europe-west4-python.pkg.dev/test-artifact-registry-423208/test/ dist/*", depends-on = ["build"]}
check = {cmd = "twine check --skip-existing --repository-url https://europe-west4-python.pkg.dev/test-artifact-registry-423208/test/ say_hi"}

# Test the library
[tool.pixi.feature.test.tasks]
test = "pytest tests/"
