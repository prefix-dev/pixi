# Introduction:
#
# This is a small example that builds and uploads a `.whl` to a custom pypi registry
# If you want to upload to PyPI just replace the `--repository-url`
# To use with GCP, make sure you've run a `gcloud auth`

# Using the custom registry:
#
# To use the custom GCP registry, unfortunately you have to have keyring installed globally
# Because `uv` which we use for PyPI resolution uses a subprocess to call `keyring`
# Also you need to add `oauth2accesstoken@` to the url e.g.
# `https://oauth2token@europe-west4-python.pkg.dev/test-artifact-registry-423208/test/`
#
# Example of a feature that uses this:
#
# [feature.lib.pypi-options]
# index-url = "https://oauth2accesstoken@europe-west4-python.pkg.dev/test-artifact-registry-423208/test/"
#
# [feature.lib.pypi-dependencies]
# python-library-gcp-keyring = { version = "==0.1.0" }
#
# To Install:
# Use `pixi install --pypi-keyring-provider subprocess` or configure in global configuration

[project]
authors = [{ name = "Tim de Jager", email = "tim@prefix.dev" }]
dependencies = ["rich"]
description = "Add a short description here"
name = "python-library-gcp-keyring"
requires-python = ">= 3.11"
version = "0.1.0"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64", "win-64", "osx-64"]


[tool.pixi.feature.publish.dependencies]
# For building wheel using hatch
hatch = "*"
# Uploading package
twine = "*"
# Used for gcp authentication by twine
# We need this in the environment so that twine running in the
# environment is able to use it
keyring = ">=25.2.0,<25.3"
"keyrings.google-artifactregistry-auth" = ">=1.1.1,<1.2"

# Test feature
[tool.pixi.feature.test.dependencies]
pytest = "*"

# Local install for testing
[tool.pixi.pypi-dependencies]
python-library-gcp-keyring = { path = ".", editable = true }

[tool.pixi.environments]
# Use this env for publishing:
publish = { features = ["publish"], solve-group = "default" }
# Use this env for testing:
test = { features = ["test"], solve-group = "default" }

# This has tasks for building and uploading
# to custom GCP instance
[tool.pixi.feature.publish.tasks]
# Build into a wheel using hatch
build = { cmd = "hatch build", inputs = ["say_hi/*"], outputs = ["dist/*"] }
# Upload to custom GCP registry using twine
publish = { cmd = "twine upload --skip-existing --repository-url https://europe-west4-python.pkg.dev/test-artifact-registry-423208/test/ dist/*", depends-on = [
  "build",
] }

# Test the library
[tool.pixi.feature.test.tasks]
test = "pytest tests/"
