[project]
authors = [
  "Wolf Vollprecht <wolf@prefix.dev>",
  "Bas Zalmstra <bas@prefix.dev>",
  "Tim de Jager <tim@prefix.dev>",
  "Ruben Arts <ruben@prefix.dev>",
]
description = "Package management made easy!"
name = "pixi"
# Using faster repodata fetching from our experimental fast channel, which implements https://github.com/conda/ceps/pull/75
channels = ["https://prefix.dev/conda-forge"]
platforms = ["linux-64", "win-64", "osx-64", "osx-arm64", "linux-aarch64"]
requires-pixi = ">=0.45"

[dependencies]
git = "==2.47.1"
python = "3.12.*"

[tasks]
build-debug = "cargo build"
build-release = "cargo build --release"
bump = "tbump --only-patch $RELEASE_VERSION"
generate-cli-docs = "cargo run --locked --manifest-path pixi_docs/Cargo.toml"
install = "cargo install --path . --locked"
install-as = { cmd = "python scripts/install.py", depends-on = [
  "build-release",
] }
pypi-proxy = "python scripts/pypi-proxy.py"
release = "python scripts/release.py"
run-all-examples = { cmd = "python tests/scripts/run-all-examples.py --pixi-exec $CARGO_TARGET_DIR/release/pixi", depends-on = [
  "build-release",
] }
test = { depends-on = ["test-all-fast"] }
test-all-fast = { depends-on = ["test-fast", "test-integration-fast"] }
test-all-slow = { depends-on = ["test-slow", "test-integration-slow"] }
test-fast = "cargo nextest run --workspace --all-targets"
test-slow = """cargo nextest run --workspace --all-targets --retries 2 --features slow_integration_tests
              --status-level skip --failure-output immediate-final --no-fail-fast --final-status-level slow"""
update-lockfiles = "python scripts/update-lockfiles.py"
# TODO: add cargo-edit to conda-forge
update-rattler = "cargo upgrade -p rattler -p file_url -p rattler_cache -p rattler_conda_types -p rattler_digest -p rattler_lock -p rattler_networking -p rattler_repodata_gateway -p rattler_shell -p rattler_solve -p rattler_virtual_packages"


[feature.pytest.dependencies]
filelock = ">=3.16.0,<4"
mypy = ">=1.11,<1.12"
py-rattler = ">=0.6.3,<0.10"
pytest = "*"
pytest-rerunfailures = ">=15,<16"
pytest-timeout = ">=2.3.1,<3"
pytest-xdist = ">=3.6.1,<4"
pyyaml = ">=6.0.2,<7"
rich = ">=14,<15"
syrupy = ">=4.8.0,<5"
tomli-w = ">=1.0,<2"
types-pyyaml = ">=6.0.12.20241230,<7"

[feature.pytest.tasks]
test-common-wheels = { cmd = "pytest -s --numprocesses=auto tests/wheel_tests/", depends-on = [
  "build-release",
] }
test-common-wheels-ci = { cmd = "pytest --numprocesses=auto --verbose tests/wheel_tests/" }
test-integration-ci = "pytest --numprocesses=auto --durations=0 --timeout=100 --verbose -m 'not extra_slow' tests/integration_python"
test-integration-extra-slow = { cmd = "pytest --numprocesses=auto --durations=0 --timeout=600 tests/integration_python", depends-on = [
  "build-release",
] }
test-integration-extra-slow-ci = "pytest --numprocesses=auto --durations=0 --timeout=600 tests/integration_python"
test-integration-fast = { cmd = "pytest --pixi-build=debug --numprocesses=auto --durations=0 --timeout=100 -m 'not slow and not extra_slow' tests/integration_python", depends-on = [
  "build-debug",
] }
test-integration-slow = { cmd = "pytest --numprocesses=auto --durations=0 --timeout=100 -m 'not extra_slow' tests/integration_python", depends-on = [
  "build-release",
] }
# pass the file to run as an argument to the task
# you can also pass a specific test function, like this:
# /path/to/test.py::test_function
test-specific-test = { cmd = "pytest -k {{ test_substring }}", args = [
  "test_substring",
], depends-on = [
  "build-release",
] }
# Update one test channel by passing on value of `mappings.toml`
# e.g. "multiple_versions_channel_1"
update-test-channel = { cmd = "python update-channels.py {{ channel }}", args = [
  "channel",
], cwd = "tests/data/channels" }


[feature.dev.dependencies]
# Needed for the citation
cargo-nextest = ">=0.9.78,<0.10"
cffconvert = ">=2.0.0,<2.1"
tbump = ">=6.9.0,<6.10"

[feature.lint.dependencies]
actionlint = ">=1.7.7,<2"
go-shfmt = ">=3.11.0,<4"
pre-commit = ">=4.1.0,<5"
pre-commit-hooks = ">=5.0.0,<6"
prettier = ">=3.5.2,<4"
ruff = ">=0.9.7,<0.10"
shellcheck = ">=0.10.0,<0.11"
taplo = ">=0.9.3,<0.10"
typos = ">=1.29.10,<2"

[feature.lint.tasks]
actionlint = { cmd = "actionlint", env = { SHELLCHECK_OPTS = "-e SC2086" } }
cargo-clippy = "cargo clippy --all-targets --workspace -- -D warnings"
cargo-clippy-pixi_docs = "cargo clippy --all-targets --workspace --manifest-path pixi_docs/Cargo.toml -- -D warnings"
cargo-fmt = "cargo fmt --all"
cargo-fmt-pixi_docs = "cargo fmt --all --manifest-path pixi_docs/Cargo.toml"
check-openssl = "python tests/scripts/check-openssl.py"
lint = "pre-commit run --all-files --hook-stage=manual"
lint-pixi_docs = { depends-on = [
  "cargo-fmt-pixi_docs",
  "cargo-clippy-pixi_docs",
] }
pre-commit-install = "pre-commit install --install-hooks -t=pre-commit -t=pre-push"
pre-commit-install-minimal = "pre-commit install -t=pre-commit"
pre-commit-run = "pre-commit run --all-files"
prettier-fmt = { cmd = "prettier --write" }
ruff-format = "ruff format --force-exclude"
ruff-lint = "ruff check --fix --exit-non-zero-on-fix --force-exclude"
shell-format = "shfmt --write --indent=4 --simplify --binary-next-line"
toml-format = { cmd = "taplo fmt", env = { RUST_LOG = "warn" } }
toml-lint = "taplo lint --verbose **/pixi.toml"
typecheck-python = "mypy"
typos = "typos --write-changes --force-exclude"

[feature.build.dependencies]
# Needed for building
compilers = ">=1.9.0,<2"
git = ">=2.46.0,<3"
openssl = "3.*"
pkg-config = "0.29.*"
rust = "==1.84.0"
rust-src = ">=1.84.0,<2"

[feature.build.target.linux-64.dependencies]
clang = ">=20.1.2,<20.2"
compilers = ">=1.6.0"
make = ">=4.3,<5"
mold = ">=2.33.0,<3.0"

[feature.build.activation]
env.CARGO_TARGET_DIR = "target/pixi"

[feature.build.target.unix.activation]
scripts = ["scripts/activate.sh"]

[feature.docs.dependencies]
cairosvg = "2.7.1.*"
git-cliff = ">=2.4.0,<3"
mdx_truly_sane_lists = ">=1.3,<2"
mike = "2.0.0.*"
mkdocs-material = ">=9.5.49,<10"
mkdocs-redirects = ">=1.2.1,<2"
pillow = ">=9.4.0"

[feature.docs.tasks]
build-docs = "mkdocs build --strict"
bump-changelog = "git-cliff --unreleased --prepend CHANGELOG.md --tag $RELEASE_VERSION"
deploy-dev = "mike deploy --push dev devel"
deploy-latest = "mike deploy --push --update-aliases $RELEASE_VERSION latest"
docs = "mkdocs serve"
mike-serve = "mike serve"

[feature.schema.tasks]
generate-schema = { cmd = "python model.py > schema.json", cwd = "schema" }
test-schema = { cmd = "pytest -s", depends-on = "generate-schema", cwd = "schema" }

[feature.schema.dependencies]
jsonschema = "*"
pydantic = ">=2.6.3,<2.7"
pyyaml = ">=6.0.1,<6.1"

[feature.pypi-gen.dependencies]
hatchling = ">=1.25.0,<2"
python-build = ">=1.2.2,<2"

[feature.pypi-gen.tasks]
pypi-gen-indexes = "python tests/data/pypi-indexes/generate-indexes.py"

[feature.micromamba]
dependencies = { micromamba = "*" }
tasks = { test-export = "bash tests/scripts/test-export.sh" }

[feature.trampoline.dependencies]
python = ">=3.13.1,<3.14"
zstd = ">=1.5.6,<2"

[feature.trampoline.tasks]
build-trampoline = "python trampoline/build-trampoline.py"

#
# Feature to build recipes
#
[feature.recipes.dependencies]
rattler-build = ">=0.39.0,<0.40"

[feature.recipes.tasks.build-backends]
cmd = "rattler-build build --recipe-dir empty --output-dir ."
cwd = "tests/build-backends"
description = "Build build-backends used for testing purposes"

#
# Environment descriptions
#

[environments]
default = { features = [
  "build",
  "dev",
  "schema",
  "pytest",
], solve-group = "default" }
docs = { features = [
  "docs",
], no-default-feature = true, solve-group = "default" }
lint = { features = [
  "lint",
  "pytest",
  "build",
], no-default-feature = true, solve-group = "default" }
pypi-gen = { features = ["pypi-gen"] }
recipes = { features = ["recipes"], no-default-feature = true }
schema = { features = [
  "schema",
  "pytest",
], no-default-feature = true, solve-group = "default" }
test-export = { features = ["micromamba"], no-default-feature = true }
trampoline = { features = ["trampoline"], no-default-feature = true }
