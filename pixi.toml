[workspace]
authors = [
  "Wolf Vollprecht <wolf@prefix.dev>",
  "Bas Zalmstra <bas@prefix.dev>",
  "Tim de Jager <tim@prefix.dev>",
  "Ruben Arts <ruben@prefix.dev>",
]
channels = ["https://prefix.dev/conda-forge"]
description = "Package management made easy!"
platforms = ["linux-64", "win-64", "osx-64", "osx-arm64", "linux-aarch64"]
requires-pixi = ">=0.45"

[dependencies]
cargo-insta = "*"
git = ">=2.51.0,<3"
python = ">=3.13.5,<3.15"

[tasks]
build-debug = "cargo build"
build-release = "cargo build --release"
bump = "tbump --only-patch $RELEASE_VERSION"
generate-cli-docs = "cargo run --locked --manifest-path crates/pixi_docs/Cargo.toml"
insta = "cargo insta"
install = { cmd = "cargo install --path crates/pixi --locked", description = "Install pixi itself locally using cargo" }
install-as = { cmd = "python scripts/install.py", depends-on = [
  "build-release",
] }
install-debug-as = { cmd = "python scripts/install.py --debug", depends-on = [
  "build-debug",
] }
pypi-proxy = "python scripts/pypi-proxy.py"
release = "python scripts/release.py"
run-all-examples = { cmd = "python tests/scripts/run-all-examples.py --pixi-exec $CARGO_TARGET_DIR/release/pixi", depends-on = [
  "build-release",
] }
test = { depends-on = ["test-all-fast"], description = "Run all fast tests" }
test-all-extra-slow = { depends-on = [
  "test-slow",
  "test-integration-extra-slow",
] }
test-all-fast = { depends-on = ["test-fast", "test-integration-fast"] }
test-all-slow = { depends-on = ["test-slow", "test-integration-slow"] }
test-fast = """RUST_LOG="debug,resolvo=info" cargo nextest run --workspace --all-targets"""
test-slow = """RUST_LOG="debug,resolvo=info" cargo nextest run --workspace --all-targets --features slow_integration_tests,online_tests
              --status-level skip --failure-output immediate-final --no-fail-fast --final-status-level slow"""

[feature.pytest.dependencies]
dirty-equals = ">=0.10.0,<0.11"
filelock = ">=3.19.1,<4"
inline-snapshot = ">=0.29.3,<0.30"
py-rattler = ">=0.16.0,<0.17"
pytest = ">=8.4.2,<9"
pytest-rerunfailures = ">=16.0.1,<17"
pytest-timeout = ">=2.4.0,<3"
pytest-xdist = ">=3.8.0,<4"
pyyaml = ">=6.0.3,<7"
rattler-build = ">=0.47.1,<0.48"
rich = ">=14.1.0,<15"
tomli-w = ">=1.2.0,<2"
types-pyyaml = ">=6.0.12.20250915,<7"

[feature.pytest.tasks]
test-common-wheels = { cmd = "pytest -s --numprocesses=auto tests/wheel_tests/", depends-on = [
  "build-release",
] }
test-common-wheels-ci = { cmd = "pytest --numprocesses=auto --verbose tests/wheel_tests/" }
test-integration-ci = "pytest --numprocesses=auto --durations=0 --timeout=100 --verbose -m 'not extra_slow' tests/integration_python"
test-integration-extra-slow = { cmd = "pytest --numprocesses=auto --durations=0 --timeout=600 tests/integration_python", depends-on = [
  "build-release",
] }
test-integration-extra-slow-ci = "pytest --numprocesses=auto --durations=0 --timeout=600 tests/integration_python"
test-integration-fast = { cmd = "pytest --pixi-build=debug --numprocesses=auto --durations=0 --timeout=100 -m 'not slow and not extra_slow' tests/integration_python", depends-on = [
  "build-debug",
] }
test-integration-slow = { cmd = "pytest --numprocesses=auto --durations=0 --timeout=100 -m 'not extra_slow' tests/integration_python", depends-on = [
  "build-release",
] }
# pass the file to run as an argument to the task
# you can also pass a specific test function, like this:
# /path/to/test.py::test_function
test-specific-test = { cmd = "pytest -k '{{ test_substring }}'", args = [
  "test_substring",
], depends-on = [
  "build-release",
] }
test-specific-test-debug = { cmd = "pytest --pixi-build=debug -k '{{ test_substring }}'", args = [
  "test_substring",
], depends-on = [
  "build-debug",
] }
# Update one test channel by passing on value of `mappings.toml`
# e.g. "multiple_versions_channel_1"
update-test-channel = { cmd = "python update-channels.py {{ channel }}", args = [
  "channel",
], cwd = "tests/data/channels" }

[feature.dev.dependencies]
# Needed for the citation
cargo-edit = ">=0.13.7,<0.14"
cargo-nextest = ">=0.9.105,<0.10"
cffconvert = ">=2.0.0,<3"
tbump = ">=6.9.0,<7"

[feature.dev.tasks]
insta-review = "cargo insta review --workspace"
update-rattler = "cargo upgrade --incompatible allow -p rattler -p file_url -p rattler_cache -p rattler_conda_types -p rattler_digest -p rattler_lock -p rattler_networking -p rattler_repodata_gateway -p rattler_shell -p rattler_solve -p rattler_virtual_packages"

# UV dependency management
switch-to-remote-uv = { cmd = "python scripts/local_patch.py uv remote", description = "Switch back to remote uv dependencies" }

[feature.dev.tasks.switch-to-local-uv]
args = [{ arg = "uv_path", default = "../uv" }]
cmd = "python scripts/local_patch.py uv local {{ uv_path }}"
description = "Switch to local uv development dependencies"

# Rattler dependency management
[feature.dev.tasks.switch-to-local-rattler]
args = [{ arg = "rattler_path", default = "../rattler" }]
cmd = "python scripts/local_patch.py rattler local {{ rattler_path }}"
description = "Switch to local rattler development dependencies"

[feature.dev.tasks.switch-to-remote-rattler]
cmd = "python scripts/local_patch.py rattler remote"
description = "Switch back to remote rattler dependencies"

[feature.dev.tasks.snapshot-update]
args = [{ "arg" = "expression", "default" = "" }]
cmd = "pytest --inline-snapshot=fix -k '{{ expression }}'"

[feature.lint.dependencies]
actionlint = ">=1.7.7,<2"
basedpyright = ">=1.31.6,<2"
cargo-deny = ">=0.18,<0.18.5" # 0.18.5 breaks license checking for uv crates
dprint = ">=0.49.1,<0.51"
go-shfmt = ">=3.12.0,<4"
lefthook = ">=1.13.6,<2"
ruff = ">=0.14.0,<0.15"
shellcheck = ">=0.10.0,<0.11"
taplo = ">=0.10.0,<0.11"
typos = ">=1.38.1,<2"
zizmor = ">=1.14.1,<2"

[feature.lint.tasks]
actionlint = { cmd = "actionlint", env = { SHELLCHECK_OPTS = "-e SC2086" } }
cargo-clippy = "cargo clippy --all-targets --workspace -- -D warnings"
cargo-deny = "cargo deny --workspace check license --deny warnings"
cargo-fmt = "cargo fmt --all"
check-openssl = "python tests/scripts/check-openssl.py"
dprint-check = { cmd = "dprint check --log-level=silent", description = "Check formatting with dprint" }
dprint-fmt = { cmd = "dprint fmt --incremental=false", description = "Format with dprint" }
lefthook = { cmd = "lefthook", description = "Run lefthook" }
lint = { depends-on = [
  "lint-fast",
  "lint-slow",
], description = "Run all linters and formatters on all code" }
lint-fast = { cmd = "lefthook run pre-commit --all-files --force", description = "Run all fast linters and formatters on all code (no clippy)" }
lint-slow = { cmd = "lefthook run pre-push --all-files --force", description = "Run all slow linters and formatters on all code" }
pre-commit-install = "lefthook install"
pre-commit-install-minimal = "lefthook install pre-commit"
ruff-format = "ruff format --exit-non-zero-on-format --force-exclude"
ruff-lint = "ruff check --fix --exit-non-zero-on-fix --force-exclude"
shell-format = "shfmt --write --indent=4 --simplify --binary-next-line"
toml-format = { cmd = "taplo fmt", env = { RUST_LOG = "warn" } }
toml-lint = "taplo lint --verbose **/pixi.toml"
typecheck-python = "basedpyright"
typos = "typos --force-exclude"

[feature.rust.dependencies]
rust = ">=1.88.0,<1.89"

[feature.build.dependencies]
# Needed for building
compilers = ">=1.11.0,<2"
git = ">=2.51.0,<3"
openssl = ">=3.5.4,<4"
pkg-config = ">=0.29.2,<0.30"
rust-src = ">=1.88.0,<2"

[feature.build.target.linux-64.dependencies]
clang = ">=21.1.2,<22"
compilers = ">=1.6.0"
make = ">=4.4.1,<5"
mold = ">=2.40.2,<3"

[feature.build.target.win-64.dependencies]
vs2017_win-64 = ">=19.16.27033,<20"

[feature.build.activation]
env.CARGO_TARGET_DIR = "target/pixi"

[feature.build.target.unix.activation]
scripts = ["scripts/activate.sh"]

[feature.docs.dependencies]
cairosvg = ">=2.8.2,<3"
git-cliff = ">=2.10.0,<3"
mdx_truly_sane_lists = ">=1.3,<2"
mike = ">=2.1.3,<3"
mkdocs-llmstxt = ">=0.4.0,<0.5"
mkdocs-material = ">=9.6.21,<10"
mkdocs-redirects = ">=1.2.1,<2"
pillow = ">=11.3.0,<12"

[feature.docs.tasks]
build-docs = "mkdocs build --strict"
bump-changelog = "git-cliff --unreleased --prepend CHANGELOG.md --tag $RELEASE_VERSION"
deploy-dev = "mike deploy --push dev devel"
deploy-latest = "mike deploy --push --update-aliases $RELEASE_VERSION latest"
docs = { cmd = "mkdocs serve", description = "Serve the docs locally" }
mike-serve = "mike serve"

[feature.schema.tasks]
generate-schema = { cmd = "python model.py > schema.json", cwd = "schema" }
test-schema = { cmd = "pytest -s", depends-on = "generate-schema", cwd = "schema", description = "Test the manifest json schema" }

[feature.schema.dependencies]
jsonschema = ">=3.2.0,<4"
pydantic = ">=2.11.10,<3"
pyyaml = ">=6.0.3,<7"

[feature.pypi-gen.dependencies]
hatchling = ">=1.27.0,<2"
python-build = ">=1.3.0,<2"

[feature.pypi-gen.tasks]
pypi-gen-indexes = "python tests/data/pypi-indexes/generate-indexes.py"

[feature.micromamba]
dependencies = { micromamba = ">=2.3.2,<3" }
tasks = { test-export = "bash tests/scripts/test-export.sh" }

[feature.trampoline.dependencies]
python = ">=3.14.0,<3.15"
zstd = ">=1.5.7,<2"

[feature.trampoline.tasks.build-trampoline]
cmd = "python trampoline/build-trampoline.py"
description = "Build the trampolines"

#
# Feature to build recipes
#
[feature.recipes.dependencies]
rattler-build = ">=0.47.1,<0.48"

[feature.recipes.tasks.build-backends]
cmd = "rattler-build build --recipe-dir empty --output-dir ."
cwd = "tests/build-backends"
description = "Build build-backends used for testing purposes"

[feature.dist.dependencies]
zig = ">=0.15.1,<0.16"


#
# Environment descriptions
#

[environments]
default = { features = [
  "build",
  "dev",
  "schema",
  "pytest",
  "rust",
], solve-group = "default" }
dist = { features = ["dist"], no-default-feature = true }
docs = { features = [
  "docs",
], no-default-feature = true, solve-group = "default" }
lint = { features = [
  "lint",
  "rust",
  "pytest",
  "build",
  "schema",
  "pypi-gen",
], no-default-feature = true, solve-group = "default" }
pypi-gen = { features = ["pypi-gen"] }
recipes = { features = ["recipes"], no-default-feature = true }
schema = { features = [
  "schema",
  "pytest",
], no-default-feature = true, solve-group = "default" }
test-export = { features = ["micromamba"], no-default-feature = true }
trampoline = { features = ["trampoline"], no-default-feature = true }
