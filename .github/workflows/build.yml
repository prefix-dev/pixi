name: build.yml
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - labeled
  workflow_dispatch:

jobs:
  build:
    if: github.event_name == 'workflow_dispatch' || github.event.label.name == 'ci:pixi-build' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set up Pixi
        uses: prefix-dev/setup-pixi@main
        with:
          locked: false

      - name: Build with Pixi with Pixi
        run: pixi build

      - name: Upload artifact pixi-x.x.x-<os>.conda
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: pixi-*.conda
          path: pixi-*.conda
          if-no-files-found: error

        #      - name: Authenticate prefix.dev
#        run: pixi auth login https://prefix.dev --token ${{ secrets.PIXI_BUILD_TEST_CHANNEL_API_KEY }}

#
#      Requires a way to bump the version to test the file
#      - name: Upload to prefix.dev
#        run: pixi upload https://prefix.dev/api/v1/upload/pixi-build-test pixi-*.conda
#
#      - name: Install from prefix.dev
#        shell: bash
#        run: |
#          #!/bin/bash
#          pixi_file=$(ls pixi-*.conda)
#          echo "pixi_file: $pixi_file"
#          spec=pixi=$(echo $pixi_file | cut -d- -f2)=$(echo $pixi_file | cut -d- -f3 | cut -d_ -f1)
#          echo "spec: $spec"
#          pixi global install --channel https://prefix.dev/pixi-build-test -e pixi-test --expose pixi-test=pixi $spec
#
#      - name: Test installed pixi
#        shell: bash
#        run: |
#          pixi-test --version
#          pixi-test --help
#          pixi-test global install bat
#          bat --version
