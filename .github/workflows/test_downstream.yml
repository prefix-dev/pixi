name: "Test examples and Downstream projects"

on:
  workflow_call:

jobs:
  # Install a couple of projects that we know use pixi
  test-downstream:
    name: ${{ matrix.repository }} on ${{ matrix.os }}
    # if: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' }}
    runs-on: ${{ matrix.arch.os }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          # Linux
          - { target: x86_64-unknown-linux-musl, os: ubuntu-20.04 }
          # MacOS
          - { target: x86_64-apple-darwin, os: macos-13 }
          - { target: aarch64-apple-darwin, os: macos-14 } # macOS-14 is the ARM chipset
          # Windows
          - {
              target: x86_64-pc-windows-msvc,
              os: windows-latest,
              extension: .exe,
            }
        project:
          - { ref: Deltares/Ribasim, lock_file_may_change: false }
          - { ref: quantco/polarify, lock_file_may_change: false }
        include:
          # Include specific nerfstudio test
          # is using a v4 lockfile so we need to allow it to change
          - arch: { target: x86_64-unknown-linux-musl, os: ubuntu-20.04 }
            project:
              { ref: nerfstudio-project/nerfstudio, lock_file_may_change: true }
    env:
      CONDA_OVERRIDE_CUDA: "11.8"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.project.ref }}
      # Setup pixi binary
      - name: Download binary from build
        uses: actions/download-artifact@v4
        with:
          name: pixi-${{ matrix.arch.target }}${{ matrix.arch.extension }}
          path: pixi_bin
      - name: Setup unix binary, add to github path
        if: matrix.arch.os != 'windows-latest'
        run: |
          mv pixi_bin/pixi-${{ matrix.arch.target }} pixi_bin/pixi
          chmod a+x pixi_bin/pixi
          echo "$(pwd)/pixi_bin" >> $GITHUB_PATH
      - name: Create Directory and Move Executable
        if: matrix.arch.os == 'windows-latest' && matrix.arch.target == 'x86_64-pc-windows-msvc'
        run: |
          New-Item -ItemType Directory -Force -Path "D:\.pixi"
          Move-Item -Path "pixi_bin/pixi-${{ matrix.arch.target }}${{ matrix.arch.extension }}" -Destination "D:\.pixi\pixi.exe"
        shell: pwsh
      - name: Add to PATH
        if: matrix.arch.os == 'windows-latest' && matrix.arch.target == 'x86_64-pc-windows-msvc'
        run: echo "D:\.pixi" | Out-File -Append -Encoding utf8 -FilePath $env:GITHUB_PATH
        shell: pwsh
      - name: Verify and Use Executable
        if: matrix.arch.os == 'windows-latest' && matrix.arch.target == 'x86_64-pc-windows-msvc'
        run: |
          echo "Current PATH: $env:PATH"
          pixi --version
        shell: pwsh
      - name: Help
        run: pixi --help
      - name: Info
        run: pixi info

      - name: Install repository
        run: pixi install -v
      - name: Check lockfile didn't change
        if: matrix.lock_file_may_change != true
        run: git diff --exit-code pixi.lock

  # Test all of the examples
  test-examples:
    name: Test examples on ${{ matrix.arch.os }}
    runs-on: ${{ matrix.arch.os }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          # Linux
          - { target: x86_64-unknown-linux-musl, os: ubuntu-20.04 }
          # MacOS
          - { target: x86_64-apple-darwin, os: macos-13 }
          - { target: aarch64-apple-darwin, os: macos-14 } # macOS-14 is the ARM chipset
          # Windows
          - {
              target: x86_64-pc-windows-msvc,
              os: windows-latest,
              extension: .exe,
            }
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: Download binary from build
        uses: actions/download-artifact@v4
        with:
          name: pixi-${{ matrix.arch.target }}${{ matrix.arch.extension }}
          path: pixi_bin
      - name: Debug
        run: |
          pwd
      - name: Setup unix binary, add to github path
        if: matrix.arch.os != 'windows-latest'
        run: |
          mv pixi_bin/pixi-${{ matrix.arch.target }} pixi_bin/pixi
          chmod a+x pixi_bin/pixi
          echo "$(pwd)/pixi_bin" >> $GITHUB_PATH
      - name: Create Directory and Move Executable
        if: matrix.arch.os == 'windows-latest' && matrix.arch.target == 'x86_64-pc-windows-msvc'
        run: |
          New-Item -ItemType Directory -Force -Path "D:\.pixi"
          Move-Item -Path "pixi_bin/pixi-${{ matrix.arch.target }}${{ matrix.arch.extension }}" -Destination "D:\.pixi\pixi.exe"
        shell: pwsh
      - name: Add to PATH
        if: matrix.arch.os == 'windows-latest' && matrix.arch.target == 'x86_64-pc-windows-msvc'
        run: echo "D:\.pixi" | Out-File -Append -Encoding utf8 -FilePath $env:GITHUB_PATH
        shell: pwsh
      - name: Verify and Use Executable
        if: matrix.arch.os == 'windows-latest' && matrix.arch.target == 'x86_64-pc-windows-msvc'
        run: |
          echo "Current PATH: $env:PATH"
          pixi --version
        shell: pwsh
      - name: Help
        run: pixi --help
      - name: Info
        run: pixi info
      - name: Install pixi
        run: pixi install -v
      - name: Test examples
        shell: bash
        run: bash tests/test_examples.sh

  # Run integration tests that test the command line
  # pixi interface
  test-integration:
    name: Integration test on ${{ matrix.arch.os }}
    runs-on: ${{ matrix.arch.os }}
    env:
      TARGET_RELEASE: "${{ github.workspace }}/.pixi/target/release"
    strategy:
      fail-fast: false
      matrix:
        arch:
          # Linux
          - { target: x86_64-unknown-linux-musl, os: ubuntu-20.04 }
          # MacOS
          - { target: x86_64-apple-darwin, os: macos-13 }
          - { target: aarch64-apple-darwin, os: macos-14 } # macOS-14 is the ARM chipset
          # Windows
          - {
              target: x86_64-pc-windows-msvc,
              os: windows-latest,
              extension: .exe,
            }
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Download binary from build
        uses: actions/download-artifact@v4
        with:
          name: pixi-${{ matrix.arch.target }}${{ matrix.arch.extension }}
          path: pixi_bin
      - name: Debug
        run: |
          pwd
      - name: Setup unix binary, add to github path
        if: matrix.arch.os != 'windows-latest'
        run: |
          mkdir -p ${{ env.TARGET_RELEASE }}
          mv pixi_bin/pixi-${{ matrix.arch.target }} ${{ env.TARGET_RELEASE }}/pixi
          chmod a+x ${{ env.TARGET_RELEASE }}/pixi
      - name: Create Directory and Move Executable
        if: matrix.arch.os == 'windows-latest' && matrix.arch.target == 'x86_64-pc-windows-msvc'
        run: |
          New-Item -ItemType Directory -Force -Path "${{ env.TARGET_RELEASE }}"
          Move-Item -Path "pixi_bin/pixi-${{ matrix.arch.target }}${{ matrix.arch.extension }}" -Destination "${{ env.TARGET_RELEASE }}/pixi.exe"
        shell: pwsh
      - name: Typecheck integration tests
        run: ${{ env.TARGET_RELEASE }}/pixi run typecheck-integration
      - name: Run integration tests
        run: ${{ env.TARGET_RELEASE }}/pixi run test-integration-ci
