outputs:
  - package:
      name: pixi-editor
      version: "0.1.3"

    requirements:
      build:
        - python

    build:
      noarch: generic
      script:
        interpreter: python
        content: |
          import os
          import shutil
          from pathlib import Path

          prefix = os.environ.get("PREFIX", "")
          recipe_dir = os.environ.get("RECIPE_DIR", "")

          menu_dir = Path(prefix) / "Menu"
          menu_dir.mkdir(parents=True, exist_ok=True)

          # Copy menu.json
          shutil.copy(Path(recipe_dir) / "Menu" / "menu.json", menu_dir / "pixi-editor.json")

          # Copy icon files
          for icon_name in ["pixi-icon.ico", "pixi-icon.png", "pixi-icon.icns"]:
              src = Path(recipe_dir) / "Menu" / icon_name
              if src.exists():
                  shutil.copy(src, menu_dir)

  - package:
      name: pixi-editor
      version: "0.1.4"

    requirements:
      build:
        - python

    build:
      noarch: generic
      script:
        interpreter: python
        content: |
          import os
          import shutil
          import json
          from pathlib import Path

          prefix = os.environ.get("PREFIX", "")
          recipe_dir = os.environ.get("RECIPE_DIR", "")

          menu_dir = Path(prefix) / "Menu"
          menu_dir.mkdir(parents=True, exist_ok=True)

          # Modify menu.json before copying
          menu_json_path = Path(recipe_dir) / "Menu" / "menu.json"
          menu_data = json.loads(menu_json_path.read_text())

          menu_data["menu_items"][0]["icon"] = "{{ MENU_DIR }}/another-icon.{{ ICON_EXT }}"
          menu_dir.joinpath("pixi-editor.json").write_text(json.dumps(menu_data))

          # Copy icon files
          for icon_name in ["pixi-icon.ico", "pixi-icon.png", "pixi-icon.icns"]:
            src = Path(recipe_dir) / "Menu" / icon_name
            if src.exists():
              shutil.copy(src, menu_dir)
