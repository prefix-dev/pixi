#:schema ./../../schema.json

[project]
name = "project"
version = "0.1.0"
description = "A project"
authors = ["Author <author@bla.com>"]
channels = ["stable"]
platforms = ["linux-64", "win-64", "osx-64", "osx-arm64"]
license = "MIT"
license-file = "LICENSE"
readme = "README.md"
homepage = "https://project.com"
repository = "https://github.com/author/project"
documentation = "https://docs.project.com"

[dependencies]
test = "*"
test1 = "*"
pytorch-cpu = { version = "~=1.1", channel = "pytorch" }
package1 = { version = ">=1.2.3", build="py34_0" }


[pypi-dependencies]
testpypi = "*"
testpypi1 = "*"
requests = {version = ">= 2.8.1, ==2.8.*", extras=["security", "tests"]} # Using the map allows the user to add `extras`

[host-dependencies]
test = "*"
test1 = "*"
pytorch-cpu = { version = "~=1.1", channel = "pytorch" }
package1 = { version = ">=1.2.3", build="py34_0" }

[build-dependencies]
test = "*"
test1 = "*"
pytorch-cpu = { version = "~=1.1", channel = "pytorch" }
package1 = { version = ">=1.2.3", build="py34_0" }

[tasks]
build = "conda build ."
test = { cmd = "pytest", cwd = "tests", depends_on = ["build"] }
test2 = { cmd = "pytest", cwd = "tests"}
test3 = { cmd = "pytest", depends_on = ["test2"] }
test4 = { cmd = "pytest", cwd = "tests", depends_on = ["test2"] }
test5 = { cmd = "pytest" }
test6 = { depends_on = ["test5"] }

[system-requirements]
linux = "5.10"
libc = { family="glibc", version="2.17" }
cuda = "10.1"

[feature.test.dependencies]
test = "*"

[feature.test2.dependencies]
test = "*"

[feature.prod]
activation = {scripts = ["activate.sh", "deactivate.sh"]}

[feature.lint]
dependencies = {flake8 = "3.7.9", black = "19.10b0"}

[environments]
test = {features = ["test"], solve-group = "test"}
prod = {features = ["test2"], solve-group = "test"}

[activation]
scripts = ["activate.sh", "deactivate.sh"]

[target.win-64.activation]
scripts = ["env_setup.bat"]

[target.linux-64.dependencies]
test = "*"
test1 = "*"
pytorch-cpu = { version = "~=1.1", channel = "pytorch" }
package1 = { version = ">=1.2.3", build="py34_0" }


[target.osx-arm64.pypi-dependencies]
testpypi = "*"
testpypi1 = "*"
requests = {version = ">= 2.8.1, ==2.8.*", extras=["security", "tests"]} # Using the map allows the user to add `extras`

[target.osx-64.host-dependencies]
test = "*"
test1 = "*"
pytorch-cpu = { version = "~=1.1", channel = "pytorch" }
package1 = { version = ">=1.2.3", build="py34_0" }

[target.linux-64.build-dependencies]
test = "*"
test1 = "*"
pytorch-cpu = { version = "~=1.1", channel = "pytorch" }
package1 = { version = ">=1.2.3", build="py34_0" }

[target.linux-64.tasks]
build = "conda build ."
test = { cmd = "pytest", cwd = "tests", depends_on = ["build"] }
test2 = { cmd = "pytest", cwd = "tests"}
test3 = { cmd = "pytest", depends_on = ["test2"] }
test4 = { cmd = "pytest", cwd = "tests", depends_on = ["test2"] }
test5 = { cmd = "pytest" }
test6 = { depends_on = ["test5"] }

[feature.test.target.linux-64.dependencies]
test = "*"

[feature.cuda]
activation = {scripts = ["cuda_activation.sh"]}
channels = ["nvidia"] # Results in:  ["nvidia", "conda-forge"] when the default is `conda-forge`
dependencies = {cuda = "x.y.z", cudnn = "12.0"}
pypi-dependencies = {torch = "==1.9.0"}
platforms = ["linux-64", "osx-arm64"]
system-requirements = {cuda = "12"}
tasks = { warmup = "python warmup.py" }
target.osx-arm64 = {dependencies = {mlx = "x.y.z"}}

[feature.cuda2.activation]
scripts = ["cuda_activation.sh"]

[feature.cuda2.dependencies]
cuda = "x.y.z"
cudnn = "12.0"

[feature.cuda2.pypi-dependencies]
torch = "==1.9.0"

[feature.cuda2.system-requirements]
cuda = "12"

[feature.cuda2.tasks]
warmup = "python warmup.py"

[feature.cuda2.target.osx-arm64.dependencies]
mlx = "x.y.z"

# Channels and Platforms are not available as separate tables as they are implemented as lists
[feature.cuda2]
channels = ["nvidia"]
platforms = ["linux-64", "osx-arm64"]


[tool.poetry]
test = "bla"
test1 = ["bla", "bli"]
test2= { version = "~=1.1", channel = "test" }

[tool.poetry.dependencies]
test = "bla"

[tool.ruff]
config = "ruff.yaml"
