[workspace]
members = ["cargo:."]

# Config for 'dist'
[dist]
# The preferred dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "1.0.0-rc.1"
# CI backends to support
ci = "github"
# The installers to generate for each app
installers = ["msi"]
# The archive format to use for windows builds (defaults .zip)
windows-archive = ".zip"
# The archive format to use for non-windows builds (defaults .tar.xz)
unix-archive = ".tar.gz"
# Target platforms to build apps for (Rust target-triple syntax)
targets = [
  "aarch64-apple-darwin",
  "aarch64-unknown-linux-musl",
  "aarch64-pc-windows-msvc",
  "x86_64-apple-darwin",
  "x86_64-unknown-linux-musl",
  "x86_64-pc-windows-msvc",
]
# Whether CI should trigger releases with dispatches instead of tag pushes
dispatch-releases = true
# Which phase dist should use to create the GitHub release
github-release = "announce"
# Whether to auto-include files like READMEs, LICENSEEs, and CHANGELOGs (default true)
auto-includes = false
# Whether to place binaries in the root of the archive
binaries-in-root = true
# Which actions to run on pull requests
pr-run-mode = "skip"
# Skip checking whether the specified configuration files are up to date
allow-dirty = ["msi", "ci"]
# Whether to sign macOS executables
macos-sign = true
# Features to pass to cargo build
features = ["self_update", "performance"]

[dist.github-custom-runners]
# macOS targets
aarch64-apple-darwin = "macos-latest"
x86_64-apple-darwin = "macos-latest"

# Windows targets
aarch64-pc-windows-msvc = "windows_x64_2025_large"
x86_64-pc-windows-msvc = "windows_x64_2025_large"
# Linux targets
aarch64-unknown-linux-musl = "8core_ubuntu_latest_runner"
x86_64-unknown-linux-musl = "8core_ubuntu_latest_runner"

[dist.dependencies.apt]
gcc-aarch64-linux-gnu = { version = '*', targets = [
  "aarch64-unknown-linux-gnu",
  "aarch64-unknown-linux-musl",
] }
